#!/bin/bash


echo "#######################################"
echo "## Start -- 开始安装"
echo "#######################################"


echo "==========关闭防火墙和selinux=========="
systemctl stop firewalld && systemctl disable firewalld
setenforce 0
sed -i '7s/enforcing/disabled/' /etc/selinux/config
echo "================Done.=================="


echo "===============同步时间=================="
yum -y install chrony
# 云上使用内网ntp-server地址
sed -i.bak '3,6d' /etc/chrony.conf && sed -i '3cserver ntp1.aliyun.com iburst' /etc/chrony.conf
systemctl start chronyd && systemctl enable chronyd

chronyc sources
timedatectl set-timezone UTC
date
echo "================Done.===================="


# 更新离线yum源

yum update -y
yum install -y epel-release
tee /etc/yum.repos.d/nginx.repo <<-'EOF'
[nginx-stable]
name=nginx stable repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=1
enabled=1
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true
EOF

tee /etc/yum.repos.d/docker.repo <<-'EOF'
[docker-ce-stable]
name=Docker CE Stable - $basearch
baseurl=https://download.docker.com/linux/centos/7/$basearch/stable
gpgcheck=1
enabled=1
gpgkey=https://download.docker.com/linux/centos/gpg
EOF


echo "===========安装docker-ce============="
yum -y install docker-ce docker-ce-cli
systemctl enable docker && systemctl start docker

touch /etc/docker/daemon.json
tee /etc/docker/daemon.json <<-'EOF'
{
  "log-opts": {
    "max-size": "5m",
    "max-file": "3"
  },
  "exec-opts": ["native.cgroupdriver=systemd"]
}
EOF

systemctl daemon-reload
systemctl restart docker

docker info
docker version
echo "===============Done.=================="


echo "======================安装依赖工具===================="
yum install -y wget jq vim yum-utils net-tools telnet openssl
echo "=========================Done.========================"



echo "========================安装代理======================"
# clash
CLASH_VERSION=v1.11.12
mkdir /opt/clash
mkdir /opt/clash/bin
mkdir /opt/clash/log
/bin/cp ./packages/clash/clash-linux-amd64-$CLASH_VERSION.gz /opt/clash/
gzip -d /opt/clash/clash-linux-amd64-$CLASH_VERSION.gz
mv /opt/clash/clash-linux-amd64-$CLASH_VERSION /opt/clash/bin/clash
chmod +x /opt/clash/bin/clash

# subconverter
/bin/cp ./packages/clash/subconverter_linux64.tar.gz /opt/clash/
tar xzvf /opt/clash/subconverter_linux64.tar.gz -C /opt/clash/
rm -rf /opt/clash/subconverter_linux64.tar.gz
cat >> /opt/clash/subconverter/generate.ini <<EOF
[freewhole]
path=../config.yaml
target=clash
url=https://sub.qiduo.eu.org/link/xwm2ZoKsFGCFZa6X?mu=1
EOF

# service clash
cat > /opt/clash/bin/start <<EOF
#!/bin/bash

PIDFILE=/opt/clash/log/clash.pid
if [ -f \$PIDFILE ]
then
  kill -9 \$(cat \$PIDFILE)
fi

echo \$\$ > \$PIDFILE

/opt/clash/subconverter/subconverter -g --artifact "freewhole"

/opt/clash/bin/clash -d /opt/clash | tee /opt/clash/log/clash.log

EOF
chmod +x /opt/clash/bin/start

cat > /opt/clash/bin/stop <<EOF
#!/bin/bash

PIDFILE=/opt/clash/log/clash.pid
if [ -f \$PIDFILE ]
then
  kill -9 \$(cat \$PIDFILE)
fi
EOF
chmod +x /opt/clash/bin/stop

cat > /opt/clash/bin/clash.service <<EOF
[Unit]
[Service]
User=root
Group=root
ExecStart=/opt/clash/bin/start
ExecStop=/opt/clash/bin/stop
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target
EOF

/bin/cp /opt/clash/bin/clash.service /etc/systemd/system/clash.service
systemctl start clash
systemctl enable clash

# 定时更新订阅
(echo "0 1 * * * systemctl restart clash" ; crontab -l) | crontab
echo "==========================Done.======================="



echo "=======================安装证书管理器================="
yum install snapd -y
systemctl enable --now snapd.socket
ln -s /var/lib/snapd/snap /snap

snap ack ./packages/certbot/core_13886.assert
snap install ./packages/certbot/core_13886.snap
snap ack ./packages/certbot/core20_1695.assert
snap install ./packages/certbot/core20_1695.snap
snap ack ./packages/certbot/certbot_2511.assert
snap install ./packages/certbot/certbot_2511.snap --classic
# 在线安装
# snap install core && snap refresh core
# snap install --classic certbot

ln -s /snap/bin/certbot /usr/bin/certbot
snap set certbot trust-plugin-with-root=ok

snap ack ./packages/certbot/certbot-dns-aliyun_6.assert
snap install ./packages/certbot/certbot-dns-aliyun_6.snap
# 在线安装
# snap install certbot-dns-aliyun

snap connect certbot:plugin certbot-dns-aliyun

mkdir /etc/letsencrypt
cat > /etc/letsencrypt/aliyun-credentials.ini <<EOF
dns_aliyun_access_key=$1
dns_aliyun_access_key_secret=$2
EOF
chmod 600 /etc/letsencrypt/aliyun-credentials.ini

certbot -n --email operator@ouxxa.com --agree-tos certonly -a dns-aliyun --dns-aliyun-credentials /etc/letsencrypt/aliyun-credentials.ini -d it.ouxxa.com -d "*.it.ouxxa.com"
certbot renew --dry-run

systemctl list-timers
echo "==========================Done.======================="


echo "=======================安装jumpserver================="
# 
tar -xzvf ./packages/jumpserver/jumpserver-offline-installer-v2.27.0-amd64-113.tar.gz
mv ./jumpserver-offline-installer-v2.27.0-amd64-113 /opt/jumpserver
/bin/cp ./packages/jumpserver/config-example.txt /opt/jumpserver/config-example.txt
/opt/jumpserver/jmsctl.sh install
/opt/jumpserver/jmsctl.sh start
echo "===========================Done.======================"


echo "=============安装nexus=============="
docker pull sonatype/nexus3:3.43.0
mkdir -p 
docker run -dti \
    --name=nexus \
    --privileged=true \
    --restart=always \
    -e INSTALL4J_ADD_VM_PARAMS="-Xms4G -Xmx4G -XX:MaxDirectMemorySize=6717M -Djava.util.prefs.userRoot=/nexus-data/" \
    -p 8088:8081 \
    -v /etc/localtime:/etc/localtime \
    -v /opt/nexus3/data:/nexus-data \
    sonatype/nexus3:3.43.0
# todo 自动配置，admin账户, 开启匿名，blob和repo创建: maven-hub, npm-hub, docker-hub
echo "================Done.==============="


echo "=============安装nginx=============="
yum install -y nginx

tee /etc/nginx/conf.d/jumpserver.conf <<-'EOF'
server {
    listen 80;
    server_name jms.it.ouxxa.com;
    return 301 https://$server_name$request_uri;
}
server {
    listen 443 ssl http2;
    server_name          jms.it.ouxxa.com;
    ssl_certificate      /etc/letsencrypt/live/it.ouxxa.com/cert.pem;
    ssl_certificate_key  /etc/letsencrypt/live/it.ouxxa.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_protocols TLSv1.1 TLSv1.2;
    add_header Strict-Transport-Security "max-age=63072000" always;

    client_max_body_size 4096m;
    location / {
        proxy_pass http://localhost:81;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
}
EOF

# server_name 云上为repo.prod/intgr.it.ouxxa.com
# 证书位置也有变化. docker-hub仓库路径要与nexus3配置对应
tee /etc/nginx/conf.d/nexus.conf <<-'EOF'
server {
    listen 80;
    server_name repo.it.ouxxa.com;
    return 301 https://$server_name$request_uri;
}
server {
    listen 443 ssl http2;
    server_name repo.it.ouxxa.com;

    ssl_certificate      /etc/letsencrypt/live/it.ouxxa.com/cert.pem;
    ssl_certificate_key  /etc/letsencrypt/live/it.ouxxa.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    add_header Strict-Transport-Security "max-age=63072000" always;

    client_max_body_size 0;
    chunked_transfer_encoding on;	

    location / {
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto "https";
        proxy_pass http://127.0.0.1:8088/;
        proxy_connect_timeout 3600;
        proxy_send_timeout 3600;
        proxy_read_timeout 3600;
        proxy_buffering off;
        proxy_request_buffering off;
    }

    location /v2 {
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto "https";
        proxy_pass http://127.0.0.1:8088/repository/docker-hub/$request_uri;
        proxy_connect_timeout 3600;
        proxy_send_timeout 3600;
        proxy_read_timeout 3600;
        proxy_buffering off;
        proxy_request_buffering off;
    }

    location /v1 {
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto "https";
        proxy_pass http://127.0.0.1:8088/repository/docker-hub/$request_uri;
        proxy_connect_timeout 3600;
        proxy_send_timeout 3600;
        proxy_read_timeout 3600;
        proxy_buffering off;
        proxy_request_buffering off;
    }
}
EOF

rm -rf /etc/nginx/conf.d/default.conf

tee /etc/nginx/conf.d/default.conf <<-'EOF'
server {
    listen 80 default;
    return 404;
}

server {
    listen 443 default;
    return 404;

    ssl_certificate      /etc/letsencrypt/live/it.ouxxa.com/cert.pem;
    ssl_certificate_key  /etc/letsencrypt/live/it.ouxxa.com/privkey.pem;
}
EOF

systemctl start nginx
systemctl enable nginx

echo "================Done.==============="

